#!/bin/bash

usage() {
	cat <<-USAGE
		Usage:
		  $0 [--stash] [repo[/branch]]
		    Fetch, rebase, and push.
		  --stash
		    Saves the current status in stash before syncing, and pops afterwards.
		  repo/branch
		    Specifies where to fetch from, pull to, and what to merge with. 
	USAGE
	exit 1
}

red() {
	echo
	echo -e "\033[1;31m$*\033[0m"
}

green() {
	echo
	echo -e "\033[1;32m$*\033[0m"
}

stat() {
	status="$(git status --porcelain 2> /dev/null)"
	if (( $? != 0 )) || [[ "$status" != "" ]]; then
		red Stopping
		if [[ "$1" != "" ]]; then
			echo "$1"
		fi
		echo
		git status
		echo
		exit 1
	fi
}

stash=0
while [[ "$1" == -* ]]; do
	case "$1" in
		--stash)
			stash=1
			;;
		*)
			usage
			;;
	esac
	shift
done

case "$#" in
	1)
		remote_branch="$1"
		if [[ "$remote_branch" == */* ]]; then
			remote_source="$(echo "$1" | sed -e 's#^remote/##g' -e 's#/.*##g')"
		else
			remote_source="$remote_branch"
			remote_branch="$remote_branch/master"
		fi
		;;
	0)
		git_remote_source="$(dirname "$(readlink "$0")")/git-remote-source"
		remote_branch="$("$git_remote_source")"
		remote_source="$(echo "$remote_branch" | sed -e 's#/.*##')"
		;;
	*)
		usage
		;;
esac

if (( $stash == 1 )); then
	old_stash_count=$(git stash list | wc -l)

	green Stashing
	git stash save

	new_stash_count=$(git stash list | wc -l)
	if (( $new_stash_count == $old_stash_count )); then
		# The stash save didn't do anything; turn off stashing so we don't pop anything either.
		stash=0
	fi
else
	stat "To stash before and after syncing, call git sync --stash"
fi

green Fetching
git fetch "$remote_source"
stat

green Rebasing
git rebase "$remote_branch"
stat

green Pushing
git push "$remote_source"
stat

if (( $stash == 1 )); then
	green Popping the stash
	git stash pop
fi

echo
